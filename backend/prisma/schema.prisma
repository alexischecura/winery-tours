// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(cuid())
  name             String   @db.VarChar(255)
  email            String   @db.VarChar(255)
  photo            String?  @default("default-user.jpg")
  role             UserRole @default(USER)
  password         String
  verified         Boolean? @default(false)
  verificationCode String?  @db.Text
  active           Boolean  @default(true)

  tours   Tour[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, verificationCode])
  @@index([email, verificationCode])
  @@map("users")
}

enum UserRole {
  USER
  GUIDE
  LEAD_GUIDE
  ADMIN
}

model Winery {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(255)
  description String
  imageCover  String
  images      String[]
  address     String
  coordinates Float[]

  tours TourEvent[]

  @@map("wineries")
}

model Tour {
  id              String     @id @default(cuid())
  name            String     @db.VarChar(255)
  duration        Int
  maxGroupSize    Int
  ratingsAverage  Float      @default(4.5)
  ratingsQuantity Int        @default(0)
  price           Int
  priceDiscount   Int        @default(0)
  summary         String
  description     String?
  location        String?
  imageCover      String
  startDates      DateTime[]

  guides   User[]
  reviews  Review[]
  wineries TourEvent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tours")
}

model TourEvent {
  id           String  @id @default(cuid())
  day          Int
  specialEvent Boolean @default(false)
  tour         Tour    @relation(fields: [tourId], references: [id])
  tourId       String
  winery       Winery  @relation(fields: [wineryId], references: [id])
  wineryId     String

  @@map("tour_events")
}

model Review {
  id      String @id @default(cuid())
  rating  Float
  comment String

  tourId String
  tour   Tour   @relation(fields: [tourId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("reviews")
}
